{"version":3,"sources":["tony.jpg","components/LinkItem.tsx","components/Navbar.tsx","components/Home.tsx","components/About.tsx","components/Titans.tsx","components/Titan.tsx","components/Form.tsx","components/DataVisualizations.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","StyledLink","styled","Link","LinkTitle","h1","LinkItem","link","to","NavbarLinks","div","Navbar","linkItems","map","Home","src","tony","alt","style","width","height","About","GET_TITANS","gql","Titans","props","query","loading","error","data","message","getTitans","console","log","titan","key","name","pathname","state","Titan","location","_id","industry","claimToFame","quotes","source","quote","index","JSON","stringify","hashtags","SAVE_TITAN","Form","useState","setName","setIndustry","setClaimToFame","setSource","setQuotes","useMutation","saveTitan","stateMachine","value","currQuotes","Array","from","onChange","event","target","type","onClick","currentQuotes","push","addQuoteDiv","i","display","flexDirection","cleanQuotes","variables","submitFormValues","DataVisualizations","cache","InMemoryCache","HttpLink","uri","fetch","client","ApolloClient","defaultOptions","watchQuery","fetchPolicy","App","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88d5029e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tony.fda5c546.jpg\";","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\ntype Props = {\n  link: string;\n};\n\nconst StyledLink = styled(Link)`\n  text-decoration: none;\n  margin: 20px;\n  background-color: black;\n  padding-right: 30px;\n  padding-left: 30px;\n  border-radius: 5px;\n`;\n\nconst LinkTitle = styled.h1`\n  font-family: Old Standard TT;\n  line-height: 0.9;\n  color: white;\n`;\n\nexport const LinkItem: React.FC<Props> = ({ link }) => (\n  <StyledLink to={`/${link}`}>\n    <LinkTitle>{link}</LinkTitle>\n  </StyledLink>\n);\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { LinkItem } from \"./LinkItem\";\n\nconst NavbarLinks = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`;\n\nexport const Navbar: React.FC = ({}) => {\n  const links = [\"home\", \"about\", \"titans\", \"visualizations\", \"form\"];\n  const linkItems = links.map(link => <LinkItem link={link} />);\n  return <NavbarLinks>{linkItems}</NavbarLinks>;\n};\n","import * as React from \"react\";\nimport tony from \"../tony.jpg\";\n\nexport const Home: React.FC = ({}) => {\n  return (\n    <img src={tony} alt=\"Smiley face\" style={{ width: 100, height: 100 }} />\n  );\n};\n","import * as React from \"react\";\n\nexport const About: React.FC = ({}) => {\n  return <div>About Page</div>;\n};\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst GET_TITANS = gql`\n  query getAllTitans {\n    getTitans {\n      _id\n      name\n      industry\n      claimToFame\n      quotes {\n        _id\n        message\n        hashtags\n      }\n      source\n    }\n  }\n`;\n\nexport const Titans: React.FC = props => {\n  return (\n    <Query query={GET_TITANS}>\n      {({ loading, error, data }) => {\n        if (loading) return \"Loading...\";\n        if (error) return `Error! ${error.message}`;\n\n        const { getTitans } = data;\n        console.log(loading, error, data);\n        return (\n          <div>\n            <div>All the Titans Page</div>\n            <ul>\n              {getTitans.map(titan => (\n                <li key={titan.name}>\n                  <Link\n                    to={{\n                      pathname: `/titans/${titan.name}`,\n                      state: { titan: titan }\n                    }}\n                  >\n                    {titan.name}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n        );\n      }}\n    </Query>\n  );\n};\n","import * as React from \"react\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\ntype Props = any;\n\n// type Titan = {\n//   _id: string;\n//   name: string;\n//   industry: string;\n//   claimToFame: string;\n//   quotes: [Quote];\n//   source: string;\n// };\n\n// type Quote = {\n//   message: string;\n//   hashtags: {};\n// };\n\nexport const Titan: React.FC = (props: Props) => {\n  const { titan } = props.location.state;\n  const { _id, name, industry, claimToFame, quotes, source } = titan;\n  console.log(\"titan\", titan);\n  return (\n    <div>\n      <p>{`_id- ${_id}`}</p>\n      <p>{`name- ${name}`}</p>\n      <p>{`industry- ${industry}`}</p>\n      <p>{`claimToFame- ${claimToFame}`}</p>\n      <p>{`source- ${source}`}</p>\n      {quotes.map((quote, index) => (\n        <div>\n          <p>{`quote #${index}- ${quote.message}`}</p>\n          <p>{`quote #${index} hashtags- ${JSON.stringify(quote.hashtags)}`}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/react-hooks\";\n\nconst SAVE_TITAN = gql`\n  mutation saveTitan(\n    $name: String\n    $industry: String\n    $claimToFame: String\n    $source: String\n    $quotes: [QuoteInput]\n  ) {\n    saveTitan(\n      name: $name\n      industry: $industry\n      claimToFame: $claimToFame\n      source: $source\n      quotes: $quotes\n    ) {\n      name\n      industry\n      claimToFame\n      source\n      quotes {\n        message\n        hashtags\n        titan\n      }\n    }\n  }\n`;\n\nexport const Form: React.FC = props => {\n  const [name, setName] = useState(\"\");\n  const [industry, setIndustry] = useState(\"\");\n  const [claimToFame, setClaimToFame] = useState(\"\");\n  const [source, setSource] = useState(\"\");\n  const [quotes, setQuotes] = useState([]);\n\n  //Apollo Hook Mutations\n  const [saveTitan, { data, loading }] = useMutation(SAVE_TITAN);\n  console.log(loading);\n  const stateMachine = {\n    name: (value: string) => {\n      setName(value);\n    },\n    industry: (value: string) => {\n      setIndustry(value);\n    },\n    claimToFame: (value: string) => {\n      setClaimToFame(value);\n    },\n    source: (value: string) => {\n      setSource(value);\n    },\n    quote: (message: string, index: number) => {\n      const currQuotes = Array.from(quotes);\n      currQuotes[index].message = message;\n      setQuotes(currQuotes);\n    },\n    hashtag: (hashtags: string, index: number) => {\n      const currQuotes = Array.from(quotes);\n      currQuotes[index].hashtags = hashtags;\n      setQuotes(currQuotes);\n    }\n  };\n\n  const addQuoteDiv = () => {\n    const emptyQuote = {\n      message: \"\",\n      hashtags: \"\"\n    };\n    const currentQuotes = Array.from(quotes);\n    currentQuotes.push(emptyQuote);\n    setQuotes(currentQuotes);\n  };\n\n  const generateQuoteDivs = () => {\n    return quotes.map((quote, i) => (\n      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n        <input\n          onChange={event => stateMachine.quote(event.target.value, i)}\n          type=\"text\"\n          name={`quote${i}`}\n        />\n        <p>Hashtags</p>\n        <input\n          onChange={event => stateMachine.hashtag(event.target.value, i)}\n          type=\"text\"\n          name={`hashtags${i}`}\n        />\n      </div>\n    ));\n  };\n\n  const submitFormValues = () => {\n    const cleanQuotes = quotes.map(quote => {\n      quote[\"titan\"] = name;\n      return quote;\n    });\n    saveTitan({\n      variables: {\n        name,\n        industry,\n        claimToFame,\n        source,\n        quotes: cleanQuotes\n      }\n    });\n  };\n\n  return (\n    <div>\n      <p>Name</p>\n      <input\n        onChange={event => stateMachine.name(event.target.value)}\n        type=\"text\"\n        name=\"name\"\n      />\n      <p>Industry</p>\n      <input\n        onChange={event => stateMachine.industry(event.target.value)}\n        type=\"text\"\n        name=\"industry\"\n      />\n      <p>Claim To Fame</p>\n      <input\n        onChange={event => stateMachine.claimToFame(event.target.value)}\n        type=\"text\"\n        name=\"claimToFame\"\n      />\n      <p>Source</p>\n      <input\n        onChange={event => stateMachine.source(event.target.value)}\n        type=\"text\"\n        name=\"source\"\n      />\n      <p>Quote</p>\n      <button onClick={() => addQuoteDiv()}>Add Anoter Quote</button>\n      {generateQuoteDivs()}\n      <button onClick={() => submitFormValues()}>Submit This Form</button>\n      <br />\n      <br />\n      <br />\n      {loading && !data ? <div>Cranking...</div> : null}\n      {data && data.saveTitan ? (\n        <div>\n          <h3>Successful Save</h3>\n          <Link\n            to={{\n              pathname: `/titans/${data.saveTitan.name}`,\n              state: { titan: data.saveTitan }\n            }}\n          >\n            {`Check out the bio of ${data.saveTitan.name}`}\n          </Link>\n          <p>{JSON.stringify(data.saveTitan)}</p>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n","import * as React from \"react\";\n\nexport const DataVisualizations: React.FC = ({}) => {\n  return <div>Data Visualizations Page</div>;\n};\n","import React, { useState, createContext } from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Route, BrowserRouter } from \"react-router-dom\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloProvider as ApolloHooksProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport \"isomorphic-fetch\";\n\n//import { WindowDimensionsProvider } from \"./layout/WindowDimensionsProvider\";\n//import { Breakpoints } from \"./layout/breakpoints\";\nimport { Navbar } from \"./components/Navbar\";\nimport { Home } from \"./components/Home\";\nimport { About } from \"./components/About\";\nimport { Titans } from \"./components/Titans\";\nimport { Titan } from \"./components/Titan\";\nimport { Form } from \"./components/Form\";\nimport { DataVisualizations } from \"./components/DataVisualizations\";\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  //Deployed URL\n  //uri: \"https://savvy-mantis-253123.appspot.com/\",\n  //Local url\n  uri: \"http://localhost:8000/\",\n  fetch\n});\n\nconst client = new ApolloClient({\n  cache: cache,\n  link: link,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: \"cache-and-network\"\n    }\n  }\n});\n\nconst App = () => {\n  //const { width, height } = useWindowDimensions();\n  //console.log(\"width\", width, \"height\", height);\n\n  return (\n    <div>\n      {/* <WindowDimensionsProvider> */}\n      <ApolloProvider client={client}>\n        <ApolloHooksProvider client={client}>\n          <Navbar />\n          <Route path=\"/home\" component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route exact path=\"/titans\" component={Titans} />\n          <Route path=\"/titans/:name\" component={Titan} />\n          <Route path=\"/visualizations\" component={DataVisualizations} />\n          <Route path=\"/form\" component={Form} />\n        </ApolloHooksProvider>\n      </ApolloProvider>\n      {/* </WindowDimensionsProvider> */}\n    </div>\n  );\n};\n\nexport default App;\n\n// ReactDOM.render(\n//   <BrowserRouter>\n//     <App />\n//   </BrowserRouter>,\n//   document.getElementById(\"app\")\n// );\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}